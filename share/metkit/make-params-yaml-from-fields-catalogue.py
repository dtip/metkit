import os
import sys
import logging
from collections import OrderedDict
import psycopg2
import yaml


LOG = logging.getLogger(__name__)


# Some default values for database connection information, if not specified in
# the *NIX environment.
DEFAULT_HOST = 'db-products-prod-00'
DEFAULT_DBNAME = 'products'
DEFAULT_USER = 'ecmwf_ro'


def get_connection_details():
    """Get database connection details from the *NIX environment."""
    host = os.environ.get('PRODUCT_CATALOGUE_HOST', DEFAULT_HOST)
    dbname = os.environ.get('PRODUCT_CATALOGUE_DB', DEFAULT_DBNAME)
    user = os.environ.get('PRODUCT_CATALOGUE_USER', DEFAULT_USER)
    try:
        password = os.environ['PRODUCT_CATALOGUE_PASSWORD']
    except KeyError:
        LOG.error('PRODUCT_CATALOGUE_PASSWORD must be provided')
        sys.exit(1)
    return {
        'host': host,
        'dbname': dbname,
        'user': user,
        'password': password,
    }


def main():
    with psycopg2.connect(**get_connection_details()) as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT DISTINCT stream, type, levtype, param::INTEGER FROM fields WHERE param != '' ORDER BY stream, type, levtype, param::INTEGER")
            rows = cur.fetchall()

    index = OrderedDict()
    for row in rows:
        stream, type_, levtype, param = row
        key = (stream, type_, levtype)
        if key not in index:
            index[key] = []
        index[key].append(param)

    # Manually add type=tf parameters for PGEN
    index[('oper', 'tf', '')] = [129, 999]
    index[('enfo', 'tf', '')] = [129, 999]

    yaml_dump_data = []
    for key, vals in sorted(index.items()):
        if key[2]:
            yaml_dump_data.append([dict(stream=key[0], type=key[1], levtype=key[2]), vals])
        else:
            yaml_dump_data.append([dict(stream=key[0], type=key[1]), vals])

    with open('params.yaml', 'w') as f:
        f.write('# File automatically generated by %s\n# Do not edit\n\n' % (os.path.basename(__file__)))
        f.write(yaml.safe_dump(yaml_dump_data, default_flow_style=False))


if __name__ == '__main__':
    main()
